pipeline {
    agent any
    tools{
        jdk  'jdk17'
        maven  'maven3'
    }
    
    environment{
        SCANNER_HOME= tool 'sonar-scanner'
        AZURE_SUBSCRIPTION_ID='491e1121-c626-46e3-98ba-98f9f0434964'
        AZURE_CLIENT_SECRET='S6p8Q~R3ZtNjJZg1K_-huifAVgZU-ff9Av7W~bL8'
        AZURE_CLIENT_ID='b7d9f0a4-47f9-4403-a979-60f47294aa9b'
        AZURE_TENANT_ID='2047b1bd-994d-4366-9d87-647dac583343'
        CONTAINER_REGISTRY='project231.azurecr.io'
        RESOURCE_GROUP='AZ-NEW-22'
        REPO="services"
        IMAGE_NAME="springboot-app"
        TAG="latest"
        TRIVY_REPORT_FILE = 'trivy_report.json'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'azure-repo-id', url: 'https://rkrvritN45PSP@dev.azure.com/rkrvritN45PSP/RVRIT/_git/Mainproject-Repo'
                
            }
        }
        
        stage('Install GitLeaks') {
            steps {
                // Install GitLeaks
                sh 'curl -sL https://github.com/zricethezav/gitleaks/releases/download/v7.1.2/gitleaks-linux-amd64 -o gitleaks'
                sh 'chmod +x gitleaks'
            }
        }

        stage('Run GitLeaks') {
            steps {
                // Run GitLeaks
                sh './gitleaks --repo-path ./Mainproject-Repo'
            }
        }
        
        stage('COMPILE') {
            steps {
                sh "mvn clean compile -DskipTests=true"
            }
        }
        
        stage('OWASP Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ ', odcInstallation: 'owasp'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        
        stage('Sonarqube') {
            steps {
                withSonarQubeEnv('sonar-server'){
                  sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Mainproject-Repo \
                  -Dsonar.java.binaries=. \
                  -Dsonar.projectKey=Mainproject-Repo '''
              }
            }
        }
        
        
        
        stage('Build') {
            steps {
                sh "mvn clean package -DskipTests=true"
            }
        }
        
       
        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'myAzureCredential', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
                            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'
                            sh 'az acr login --name $CONTAINER_REGISTRY --resource-group $RESOURCE_GROUP'
                            sh 'docker build -t service-backend .'
                            sh "docker tag  service-backend $CONTAINER_REGISTRY/$REPO/$IMAGE_NAME:$TAG"
                            sh "docker push $CONTAINER_REGISTRY/$REPO/$IMAGE_NAME:$TAG"
                }
            }
        }
        
        stage("TRIVY"){
            steps{
                sh " trivy --format json --output ${TRIVY_REPORT_FILE} image $CONTAINER_REGISTRY/$REPO/$IMAGE_NAME:$TAG"
            }
        }
        
        stage('Docker Image Pull & Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'myAzureCredential', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
                            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'
                            sh 'az acr login --name $CONTAINER_REGISTRY --resource-group $RESOURCE_GROUP'
                            sh 'docker pull $CONTAINER_REGISTRY/$REPO/$IMAGE_NAME:$TAG'
                            sh "docker run -d -p 8081:8081 $CONTAINER_REGISTRY/$REPO/$IMAGE_NAME:$TAG"
                }
            }
        }
        
    }
}
